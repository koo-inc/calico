apply plugin: 'idea'

idea {
  def compilerXml = file('.idea/compiler.xml')
  if (!compilerXml.exists()) {
    println ".idea/compiler.xml is not found."
  }
  else {
    def xml = new XmlParser().parse(compilerXml)

    def profileSet = xml.component.annotationProcessing.profile
    Node profile = profileSet[0]
    profileSet.'*'.each { profile.remove(it) }
    profile.@default = true
    profile.@name = 'Default'
    profile.@enabled = true
    profile.appendNode('sourceOutputDir', [name: '.apt_generated'])
    profile.appendNode('sourceTestOutputDir', [name: '.apt_generated'])
    profile.appendNode('option', [
      name: 'doma.domain.converters',
      value: 'calicosample.core.externaldomain.ConverterProvider'
    ])
    profile.appendNode('option', [
      name: 'doma.expr.functions',
      value: 'calicosample.core.doma.PgDialect.PgExpressionFunctions'
    ])
    profile.appendNode('outputRelativeToContentRoot', [value: true])
    profile.appendNode('processorPath', [useClasspath: true])

    compilerXml.write(groovy.xml.XmlUtil.serialize(xml))
  }
}

allprojects  {
  apply plugin: 'maven'
  apply plugin: 'java'

  group = 'calico-sample'
  version = '1.0'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  compileJava.options.encoding = 'UTF-8'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'idea'
  apply plugin: 'eclipse-wtp'

  // 'provided' work around http://forums.gradle.org/gradle/topics/how_do_i_best_define_dependencies_as_provided#reply_6653285
  configurations {
    provided
  }
  sourceSets {
    main {
      compileClasspath += [configurations.provided]
    }
  }

  idea.module {
    scopes.PROVIDED.plus += [configurations.provided]
  }

  eclipse.classpath {
    //you can tweak the classpath of the Eclipse project by adding extra configurations:
    plusConfigurations += [ configurations.provided ]
    //if you don't want some classpath entries 'exported' in Eclipse
    noExportConfigurations += [ configurations.provided ]
  }

  configurations {
    all*.exclude module: 'servlet-api'
  }

  // for Doma
  idea.module {
    compileJava.dependsOn processResources
    processResources.destinationDir = compileJava.destinationDir
  }

  configurations {
    processResources.destinationDir = compileJava.destinationDir
    compileJava.dependsOn processResources
    compileJava.options.compilerArgs = [
      '-Adoma.domain.converters=calicosample.core.externaldomain.ConverterProvider',
      '-Adoma.expr.functions=calicosample.core.doma.PgDialect.PgExpressionFunctions'
    ]
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url supportRepo }
  }

  dependencies {
    compile group: 'org.postgresql', name: 'postgresql', version:'9.4-1201-jdbc41'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.3.2'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.3.8'
    compile group: 'com.google.inject', name: 'guice', version: '4.0-beta5'
    compile group: 'com.google.inject.extensions', name: 'guice-servlet', version: '4.0-beta5'

    def jacksonVersion = '2.6.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion
    compile group: 'jp.co.freemind', name: 'fm-csv-mapper', version: '0.1.4'

    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.1'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.3' // 有効にするにはtomcatを設定する必要あり
    compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.3'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
    testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version:'2.12'
    testRuntime group: 'cglib', name: 'cglib-nodep', version: '3.1'          // allows mocking of classes (in addition to interfaces)
    testRuntime group: 'org.objenesis', name: 'objenesis', version: '2.1'    // allows mocking of classes without default constructor (together with CGLIB)

    provided group: 'org.projectlombok', name: 'lombok', version:'1.14.8'
  }
}
