import java.nio.file.Paths
import java.util.function.BinaryOperator

def loadConfig(path) {
  def file = file(path)
  if (!file.directory) {
    return new ConfigObject()
  }

  def configs = []
  file
    .listFiles(new FileFilter() {
      boolean accept(File f) { return !f.directory }
    })
    .sort { it.name }
    .each {
      configs.add(new ConfigSlurper().parse(it.toURI().toURL()));
    }

  return configs.stream().reduce(new BinaryOperator() {
    @Override
    Object apply( o1, Object o2) {
      return o1.merge(o2)
    }
  }).get()
}

task expandConfig(type: Copy) {
  def configParams = loadConfig('config/')
  configParams.merge(loadConfig("${System.properties['user.home']}/.calico/${project.name}/"))
  configParams.putAll(project: project, generated: new Date())

  def templateDir = file('config/template')
  def buildTarget = "${project.buildDir}/config/"

  from templateDir
  into buildTarget
  rename '[.]tpl$', ''
  expand(configParams)

  doLast {
    fileTree(buildTarget).files.each {f ->
      def rel = Paths.get(buildTarget).relativize(f.toPath())
      f.renameTo(project.rootDir.toPath().resolve(rel).toFile())
    }
  }

  outputs.upToDateWhen { false }
}

